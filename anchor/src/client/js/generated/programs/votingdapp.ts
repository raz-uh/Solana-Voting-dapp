/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCreatePollInstruction,
  type ParsedInitializeInstruction,
  type ParsedRegisterCandidateInstruction,
  type ParsedVoteInstruction,
} from '../instructions';

export const VOTINGDAPP_PROGRAM_ADDRESS =
  '5tSMaJXAMfwNgE3sELwR7FNUZyHu8RmYctvVxZJUmNii' as Address<'5tSMaJXAMfwNgE3sELwR7FNUZyHu8RmYctvVxZJUmNii'>;

export enum VotingdappAccount {
  Candidate,
  Counter,
  Poll,
  Registrations,
  Voter,
}

export function identifyVotingdappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingdappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 69, 250, 96, 193, 10, 222, 123])
      ),
      0
    )
  ) {
    return VotingdappAccount.Candidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25])
      ),
      0
    )
  ) {
    return VotingdappAccount.Counter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 234, 167, 188, 231, 136, 153, 111])
      ),
      0
    )
  ) {
    return VotingdappAccount.Poll;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 229, 184, 221, 85, 252, 121, 32])
      ),
      0
    )
  ) {
    return VotingdappAccount.Registrations;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 93, 35, 191, 254, 147, 17, 202])
      ),
      0
    )
  ) {
    return VotingdappAccount.Voter;
  }
  throw new Error(
    'The provided account could not be identified as a votingdapp account.'
  );
}

export enum VotingdappInstruction {
  CreatePoll,
  Initialize,
  RegisterCandidate,
  Vote,
}

export function identifyVotingdappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingdappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([182, 171, 112, 238, 6, 219, 14, 110])
      ),
      0
    )
  ) {
    return VotingdappInstruction.CreatePoll;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return VotingdappInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 136, 96, 222, 242, 4, 160, 182])
      ),
      0
    )
  ) {
    return VotingdappInstruction.RegisterCandidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 110, 155, 23, 136, 126, 172, 25])
      ),
      0
    )
  ) {
    return VotingdappInstruction.Vote;
  }
  throw new Error(
    'The provided instruction could not be identified as a votingdapp instruction.'
  );
}

export type ParsedVotingdappInstruction<
  TProgram extends string = '5tSMaJXAMfwNgE3sELwR7FNUZyHu8RmYctvVxZJUmNii',
> =
  | ({
      instructionType: VotingdappInstruction.CreatePoll;
    } & ParsedCreatePollInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.RegisterCandidate;
    } & ParsedRegisterCandidateInstruction<TProgram>)
  | ({
      instructionType: VotingdappInstruction.Vote;
    } & ParsedVoteInstruction<TProgram>);
