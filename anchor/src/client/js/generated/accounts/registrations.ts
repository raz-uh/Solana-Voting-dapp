/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const REGISTRATIONS_DISCRIMINATOR = new Uint8Array([
  40, 229, 184, 221, 85, 252, 121, 32,
]);

export function getRegistrationsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTRATIONS_DISCRIMINATOR
  );
}

export type Registrations = {
  discriminator: ReadonlyUint8Array;
  count: bigint;
};

export type RegistrationsArgs = { count: number | bigint };

export function getRegistrationsEncoder(): FixedSizeEncoder<RegistrationsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['count', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REGISTRATIONS_DISCRIMINATOR })
  );
}

export function getRegistrationsDecoder(): FixedSizeDecoder<Registrations> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['count', getU64Decoder()],
  ]);
}

export function getRegistrationsCodec(): FixedSizeCodec<
  RegistrationsArgs,
  Registrations
> {
  return combineCodec(getRegistrationsEncoder(), getRegistrationsDecoder());
}

export function decodeRegistrations<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Registrations, TAddress>;
export function decodeRegistrations<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Registrations, TAddress>;
export function decodeRegistrations<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Registrations, TAddress> | MaybeAccount<Registrations, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRegistrationsDecoder()
  );
}

export async function fetchRegistrations<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Registrations, TAddress>> {
  const maybeAccount = await fetchMaybeRegistrations(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRegistrations<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Registrations, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRegistrations(maybeAccount);
}

export async function fetchAllRegistrations(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Registrations>[]> {
  const maybeAccounts = await fetchAllMaybeRegistrations(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRegistrations(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Registrations>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRegistrations(maybeAccount));
}

export function getRegistrationsSize(): number {
  return 16;
}
