/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VOTINGDAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REGISTER_CANDIDATE_DISCRIMINATOR = new Uint8Array([
  91, 136, 96, 222, 242, 4, 160, 182,
]);

export function getRegisterCandidateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTER_CANDIDATE_DISCRIMINATOR
  );
}

export type RegisterCandidateInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountPoll extends string | AccountMeta<string> = string,
  TAccountCandidate extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountRegistration extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPoll extends string
        ? WritableAccount<TAccountPoll>
        : TAccountPoll,
      TAccountCandidate extends string
        ? WritableAccount<TAccountCandidate>
        : TAccountCandidate,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountRegistration extends string
        ? WritableAccount<TAccountRegistration>
        : TAccountRegistration,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterCandidateInstructionData = {
  discriminator: ReadonlyUint8Array;
  pollId: bigint;
  name: string;
};

export type RegisterCandidateInstructionDataArgs = {
  pollId: number | bigint;
  name: string;
};

export function getRegisterCandidateInstructionDataEncoder(): Encoder<RegisterCandidateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pollId', getU64Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: REGISTER_CANDIDATE_DISCRIMINATOR })
  );
}

export function getRegisterCandidateInstructionDataDecoder(): Decoder<RegisterCandidateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pollId', getU64Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getRegisterCandidateInstructionDataCodec(): Codec<
  RegisterCandidateInstructionDataArgs,
  RegisterCandidateInstructionData
> {
  return combineCodec(
    getRegisterCandidateInstructionDataEncoder(),
    getRegisterCandidateInstructionDataDecoder()
  );
}

export type RegisterCandidateAsyncInput<
  TAccountPoll extends string = string,
  TAccountCandidate extends string = string,
  TAccountUser extends string = string,
  TAccountRegistration extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  poll?: Address<TAccountPoll>;
  candidate: Address<TAccountCandidate>;
  user: TransactionSigner<TAccountUser>;
  registration: Address<TAccountRegistration>;
  systemProgram?: Address<TAccountSystemProgram>;
  pollId: RegisterCandidateInstructionDataArgs['pollId'];
  name: RegisterCandidateInstructionDataArgs['name'];
};

export async function getRegisterCandidateInstructionAsync<
  TAccountPoll extends string,
  TAccountCandidate extends string,
  TAccountUser extends string,
  TAccountRegistration extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: RegisterCandidateAsyncInput<
    TAccountPoll,
    TAccountCandidate,
    TAccountUser,
    TAccountRegistration,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RegisterCandidateInstruction<
    TProgramAddress,
    TAccountPoll,
    TAccountCandidate,
    TAccountUser,
    TAccountRegistration,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poll: { value: input.poll ?? null, isWritable: true },
    candidate: { value: input.candidate ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    registration: { value: input.registration ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poll.value) {
    accounts.poll.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getU64Encoder().encode(expectSome(args.pollId))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.poll),
      getAccountMeta(accounts.candidate),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.registration),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRegisterCandidateInstructionDataEncoder().encode(
      args as RegisterCandidateInstructionDataArgs
    ),
    programAddress,
  } as RegisterCandidateInstruction<
    TProgramAddress,
    TAccountPoll,
    TAccountCandidate,
    TAccountUser,
    TAccountRegistration,
    TAccountSystemProgram
  >);
}

export type RegisterCandidateInput<
  TAccountPoll extends string = string,
  TAccountCandidate extends string = string,
  TAccountUser extends string = string,
  TAccountRegistration extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  poll: Address<TAccountPoll>;
  candidate: Address<TAccountCandidate>;
  user: TransactionSigner<TAccountUser>;
  registration: Address<TAccountRegistration>;
  systemProgram?: Address<TAccountSystemProgram>;
  pollId: RegisterCandidateInstructionDataArgs['pollId'];
  name: RegisterCandidateInstructionDataArgs['name'];
};

export function getRegisterCandidateInstruction<
  TAccountPoll extends string,
  TAccountCandidate extends string,
  TAccountUser extends string,
  TAccountRegistration extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: RegisterCandidateInput<
    TAccountPoll,
    TAccountCandidate,
    TAccountUser,
    TAccountRegistration,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterCandidateInstruction<
  TProgramAddress,
  TAccountPoll,
  TAccountCandidate,
  TAccountUser,
  TAccountRegistration,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poll: { value: input.poll ?? null, isWritable: true },
    candidate: { value: input.candidate ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    registration: { value: input.registration ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.poll),
      getAccountMeta(accounts.candidate),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.registration),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRegisterCandidateInstructionDataEncoder().encode(
      args as RegisterCandidateInstructionDataArgs
    ),
    programAddress,
  } as RegisterCandidateInstruction<
    TProgramAddress,
    TAccountPoll,
    TAccountCandidate,
    TAccountUser,
    TAccountRegistration,
    TAccountSystemProgram
  >);
}

export type ParsedRegisterCandidateInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poll: TAccountMetas[0];
    candidate: TAccountMetas[1];
    user: TAccountMetas[2];
    registration: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: RegisterCandidateInstructionData;
};

export function parseRegisterCandidateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRegisterCandidateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poll: getNextAccount(),
      candidate: getNextAccount(),
      user: getNextAccount(),
      registration: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRegisterCandidateInstructionDataDecoder().decode(instruction.data),
  };
}
