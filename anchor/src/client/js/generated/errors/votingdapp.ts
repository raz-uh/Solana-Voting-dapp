/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { VOTINGDAPP_PROGRAM_ADDRESS } from '../programs';

/** PollCounterUnderflow: Poll counter cannot be less than zero */
export const VOTINGDAPP_ERROR__POLL_COUNTER_UNDERFLOW = 0x1770; // 6000
/** VoterAlreadyVoted: Voter cannot vote twice */
export const VOTINGDAPP_ERROR__VOTER_ALREADY_VOTED = 0x1771; // 6001
/** CandidateAlreadyRegistered: Candidate cannot register twice */
export const VOTINGDAPP_ERROR__CANDIDATE_ALREADY_REGISTERED = 0x1772; // 6002
/** InvalidDates: Start date cannot be greater than end date */
export const VOTINGDAPP_ERROR__INVALID_DATES = 0x1773; // 6003
/** CandidateNotRegistered: Candidate is not in the poll */
export const VOTINGDAPP_ERROR__CANDIDATE_NOT_REGISTERED = 0x1774; // 6004
/** PollNotActive: Poll not currently active */
export const VOTINGDAPP_ERROR__POLL_NOT_ACTIVE = 0x1775; // 6005
/** PollDoesNotExist: Poll does not exist or not found */
export const VOTINGDAPP_ERROR__POLL_DOES_NOT_EXIST = 0x1776; // 6006

export type VotingdappError =
  | typeof VOTINGDAPP_ERROR__CANDIDATE_ALREADY_REGISTERED
  | typeof VOTINGDAPP_ERROR__CANDIDATE_NOT_REGISTERED
  | typeof VOTINGDAPP_ERROR__INVALID_DATES
  | typeof VOTINGDAPP_ERROR__POLL_COUNTER_UNDERFLOW
  | typeof VOTINGDAPP_ERROR__POLL_DOES_NOT_EXIST
  | typeof VOTINGDAPP_ERROR__POLL_NOT_ACTIVE
  | typeof VOTINGDAPP_ERROR__VOTER_ALREADY_VOTED;

let votingdappErrorMessages: Record<VotingdappError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  votingdappErrorMessages = {
    [VOTINGDAPP_ERROR__CANDIDATE_ALREADY_REGISTERED]: `Candidate cannot register twice`,
    [VOTINGDAPP_ERROR__CANDIDATE_NOT_REGISTERED]: `Candidate is not in the poll`,
    [VOTINGDAPP_ERROR__INVALID_DATES]: `Start date cannot be greater than end date`,
    [VOTINGDAPP_ERROR__POLL_COUNTER_UNDERFLOW]: `Poll counter cannot be less than zero`,
    [VOTINGDAPP_ERROR__POLL_DOES_NOT_EXIST]: `Poll does not exist or not found`,
    [VOTINGDAPP_ERROR__POLL_NOT_ACTIVE]: `Poll not currently active`,
    [VOTINGDAPP_ERROR__VOTER_ALREADY_VOTED]: `Voter cannot vote twice`,
  };
}

export function getVotingdappErrorMessage(code: VotingdappError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (votingdappErrorMessages as Record<VotingdappError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isVotingdappError<TProgramErrorCode extends VotingdappError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VOTINGDAPP_PROGRAM_ADDRESS,
    code
  );
}
