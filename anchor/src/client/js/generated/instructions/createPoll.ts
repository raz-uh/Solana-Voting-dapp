/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VOTINGDAPP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_POLL_DISCRIMINATOR = new Uint8Array([
  182, 171, 112, 238, 6, 219, 14, 110,
]);

export function getCreatePollDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_POLL_DISCRIMINATOR);
}

export type CreatePollInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountPoll extends string | AccountMeta<string> = string,
  TAccountCounter extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountPoll extends string
        ? WritableAccount<TAccountPoll>
        : TAccountPoll,
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePollInstructionData = {
  discriminator: ReadonlyUint8Array;
  description: string;
  start: bigint;
  end: bigint;
};

export type CreatePollInstructionDataArgs = {
  description: string;
  start: number | bigint;
  end: number | bigint;
};

export function getCreatePollInstructionDataEncoder(): Encoder<CreatePollInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['start', getU64Encoder()],
      ['end', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_POLL_DISCRIMINATOR })
  );
}

export function getCreatePollInstructionDataDecoder(): Decoder<CreatePollInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['start', getU64Decoder()],
    ['end', getU64Decoder()],
  ]);
}

export function getCreatePollInstructionDataCodec(): Codec<
  CreatePollInstructionDataArgs,
  CreatePollInstructionData
> {
  return combineCodec(
    getCreatePollInstructionDataEncoder(),
    getCreatePollInstructionDataDecoder()
  );
}

export type CreatePollAsyncInput<
  TAccountUser extends string = string,
  TAccountPoll extends string = string,
  TAccountCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  poll: Address<TAccountPoll>;
  counter?: Address<TAccountCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
  description: CreatePollInstructionDataArgs['description'];
  start: CreatePollInstructionDataArgs['start'];
  end: CreatePollInstructionDataArgs['end'];
};

export async function getCreatePollInstructionAsync<
  TAccountUser extends string,
  TAccountPoll extends string,
  TAccountCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: CreatePollAsyncInput<
    TAccountUser,
    TAccountPoll,
    TAccountCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePollInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountPoll,
    TAccountCounter,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    poll: { value: input.poll ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.counter.value) {
    accounts.counter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 117, 110, 116, 101, 114])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.poll),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreatePollInstructionDataEncoder().encode(
      args as CreatePollInstructionDataArgs
    ),
    programAddress,
  } as CreatePollInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountPoll,
    TAccountCounter,
    TAccountSystemProgram
  >);
}

export type CreatePollInput<
  TAccountUser extends string = string,
  TAccountPoll extends string = string,
  TAccountCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  poll: Address<TAccountPoll>;
  counter: Address<TAccountCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
  description: CreatePollInstructionDataArgs['description'];
  start: CreatePollInstructionDataArgs['start'];
  end: CreatePollInstructionDataArgs['end'];
};

export function getCreatePollInstruction<
  TAccountUser extends string,
  TAccountPoll extends string,
  TAccountCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: CreatePollInput<
    TAccountUser,
    TAccountPoll,
    TAccountCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePollInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountPoll,
  TAccountCounter,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    poll: { value: input.poll ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.poll),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreatePollInstructionDataEncoder().encode(
      args as CreatePollInstructionDataArgs
    ),
    programAddress,
  } as CreatePollInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountPoll,
    TAccountCounter,
    TAccountSystemProgram
  >);
}

export type ParsedCreatePollInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    poll: TAccountMetas[1];
    counter: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreatePollInstructionData;
};

export function parseCreatePollInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreatePollInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      poll: getNextAccount(),
      counter: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreatePollInstructionDataDecoder().decode(instruction.data),
  };
}
