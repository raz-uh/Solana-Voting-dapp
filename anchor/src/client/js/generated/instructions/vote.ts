/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VOTINGDAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const VOTE_DISCRIMINATOR = new Uint8Array([
  227, 110, 155, 23, 136, 126, 172, 25,
]);

export function getVoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VOTE_DISCRIMINATOR);
}

export type VoteInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountPoll extends string | AccountMeta<string> = string,
  TAccountCandidate extends string | AccountMeta<string> = string,
  TAccountVoter extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPoll extends string
        ? WritableAccount<TAccountPoll>
        : TAccountPoll,
      TAccountCandidate extends string
        ? WritableAccount<TAccountCandidate>
        : TAccountCandidate,
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type VoteInstructionData = {
  discriminator: ReadonlyUint8Array;
  pollId: bigint;
  cid: bigint;
};

export type VoteInstructionDataArgs = {
  pollId: number | bigint;
  cid: number | bigint;
};

export function getVoteInstructionDataEncoder(): FixedSizeEncoder<VoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pollId', getU64Encoder()],
      ['cid', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VOTE_DISCRIMINATOR })
  );
}

export function getVoteInstructionDataDecoder(): FixedSizeDecoder<VoteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pollId', getU64Decoder()],
    ['cid', getU64Decoder()],
  ]);
}

export function getVoteInstructionDataCodec(): FixedSizeCodec<
  VoteInstructionDataArgs,
  VoteInstructionData
> {
  return combineCodec(
    getVoteInstructionDataEncoder(),
    getVoteInstructionDataDecoder()
  );
}

export type VoteAsyncInput<
  TAccountPoll extends string = string,
  TAccountCandidate extends string = string,
  TAccountVoter extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  poll?: Address<TAccountPoll>;
  candidate?: Address<TAccountCandidate>;
  voter?: Address<TAccountVoter>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  pollId: VoteInstructionDataArgs['pollId'];
  cid: VoteInstructionDataArgs['cid'];
};

export async function getVoteInstructionAsync<
  TAccountPoll extends string,
  TAccountCandidate extends string,
  TAccountVoter extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: VoteAsyncInput<
    TAccountPoll,
    TAccountCandidate,
    TAccountVoter,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  VoteInstruction<
    TProgramAddress,
    TAccountPoll,
    TAccountCandidate,
    TAccountVoter,
    TAccountUser,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poll: { value: input.poll ?? null, isWritable: true },
    candidate: { value: input.candidate ?? null, isWritable: true },
    voter: { value: input.voter ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poll.value) {
    accounts.poll.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getU64Encoder().encode(expectSome(args.pollId))],
    });
  }
  if (!accounts.candidate.value) {
    accounts.candidate.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getU64Encoder().encode(expectSome(args.pollId)),
        getU64Encoder().encode(expectSome(args.cid)),
      ],
    });
  }
  if (!accounts.voter.value) {
    accounts.voter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 111, 116, 101, 114])),
        getU64Encoder().encode(expectSome(args.pollId)),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.poll),
      getAccountMeta(accounts.candidate),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getVoteInstructionDataEncoder().encode(
      args as VoteInstructionDataArgs
    ),
    programAddress,
  } as VoteInstruction<
    TProgramAddress,
    TAccountPoll,
    TAccountCandidate,
    TAccountVoter,
    TAccountUser,
    TAccountSystemProgram
  >);
}

export type VoteInput<
  TAccountPoll extends string = string,
  TAccountCandidate extends string = string,
  TAccountVoter extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  poll: Address<TAccountPoll>;
  candidate: Address<TAccountCandidate>;
  voter: Address<TAccountVoter>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  pollId: VoteInstructionDataArgs['pollId'];
  cid: VoteInstructionDataArgs['cid'];
};

export function getVoteInstruction<
  TAccountPoll extends string,
  TAccountCandidate extends string,
  TAccountVoter extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTINGDAPP_PROGRAM_ADDRESS,
>(
  input: VoteInput<
    TAccountPoll,
    TAccountCandidate,
    TAccountVoter,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): VoteInstruction<
  TProgramAddress,
  TAccountPoll,
  TAccountCandidate,
  TAccountVoter,
  TAccountUser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTINGDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poll: { value: input.poll ?? null, isWritable: true },
    candidate: { value: input.candidate ?? null, isWritable: true },
    voter: { value: input.voter ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.poll),
      getAccountMeta(accounts.candidate),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getVoteInstructionDataEncoder().encode(
      args as VoteInstructionDataArgs
    ),
    programAddress,
  } as VoteInstruction<
    TProgramAddress,
    TAccountPoll,
    TAccountCandidate,
    TAccountVoter,
    TAccountUser,
    TAccountSystemProgram
  >);
}

export type ParsedVoteInstruction<
  TProgram extends string = typeof VOTINGDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poll: TAccountMetas[0];
    candidate: TAccountMetas[1];
    voter: TAccountMetas[2];
    user: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: VoteInstructionData;
};

export function parseVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poll: getNextAccount(),
      candidate: getNextAccount(),
      voter: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getVoteInstructionDataDecoder().decode(instruction.data),
  };
}
